import org.gradle.internal.os.OperatingSystem
import org.apache.tools.ant.filters.*

import java.util.jar.Attributes
import java.util.jar.JarOutputStream
import java.util.jar.Manifest

apply from: "$rootDir/gradle/birTestableProject.gradle"

configurations {
    interopImports {
        transitive(true)
    }
}

project.ext.moduleName = files(file('src/main/ballerina/src').listFiles()).filter { File f ->
    f.isDirectory() && f.name != 'target' && f.name != '.ballerina'
}.singleFile.name

def generatedBirDir = "$buildDir/generated-bir/" + project.ext.orgName + "/" + project.ext.moduleName + "/0.0.0/"

task copyExternalMappingNextToBir(type: Copy) {
    dependsOn compileJava
    from "$buildDir/classes/java/main/META-INF/this.map.json"
    into generatedBirDir
    rename { project.ext.moduleName + ".map.json" }
}

task copyTomlFiles(type: Copy) {
    dependsOn compileJava
    from('src/main/ballerina') {
        include '*.toml'
    }
    filter(ReplaceTokens, tokens: ['project.version': project.version])
    into generatedBirDir
}

task createBir {
    dependsOn createBalo

    doLast {
        copy {
            def zipFile = zipTree("$buildDir/generated-balo/repo/" + project.ext.orgName + "/" + project.ext.moduleName + "/0.0.0/" + project.ext.moduleName + ".zip").matching {
                include "**/*.bir"
            }.files
            from zipFile
            into generatedBirDir
        }
    }

    inputs.file "$buildDir/generated-balo/repo/" + project.ext.orgName + "/" + project.ext.moduleName + "/0.0.0/" + project.ext.moduleName + ".zip"
    outputs.dir "$buildDir/generated-bir"
}

task createCacheEntries {
    dependsOn createBir
    dependsOn copyExternalMappingNextToBir
    dependsOn copyTomlFiles
}


task createBirJar(type: Exec) {
    dependsOn configurations.birJarCompile
    dependsOn configurations.bir
    dependsOn configurations.interopImports
    dependsOn createBir
    dependsOn createBirCache
    dependsOn copyExternalMappingNextToBir
    dependsOn ':ballerina-libs:copyDependencies'

    workingDir "$buildDir/generated-bir-jar"

    onlyIf { file(generatedBirDir + project.ext.moduleName + '.bir').exists() }

    doFirst {
        Set jarsToBeLoaded = []
        def mapPath = OperatingSystem.current().isWindows() ? "\"\"" : ""
        if (!sourceSets.main.allJava.isEmpty()) {
            def generatedMapPath = generatedBirDir + project.ext.moduleName + '.map.json'
            if (file(generatedMapPath).exists()) {
                mapPath = generatedMapPath
            }
        }

        configurations.interopImports.each {
            jarsToBeLoaded.addAll(it)
        }
        jarsToBeLoaded.add("$rootDir" + "/bvm/ballerina-runtime/build/libs/ballerina-runtime-${project.version}.jar")
        new File("$projectDir/src/main/ballerina/Ballerina.toml").readLines().
                findAll({x -> x ==~ /.*path = ".\/lib\/.*/ }).
                collect {
                    def jarPath = it.split(/"/)[1].replace('@project.version@', "${project.version}").
                            replace('./lib', "")
                    jarsToBeLoaded.add("$rootDir" + "/distribution/libs/libs" + jarPath)
        }

        configurations.birJarCompile.each {
            printJarCreationCommand(it, generatedBirDir, mapPath, jarsToBeLoaded)
            createClassPathJar("$buildDir/classpath/" + project.ext.moduleName + ".jar", jarsToBeLoaded)
            commandLine getJarCreationCommand(it, generatedBirDir, mapPath, jarsToBeLoaded)
        }
    }

    doLast {
        if(!file("$buildDir/generated-bir-jar/${project.ext.moduleName}.jar").exists()){
            println "$buildDir/generated-bir-jar/${project.ext.moduleName}.jar not created."
            throw new GradleException("error in creating bir jar")
        }
    }

    inputs.files(configurations.bir).withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.property("bootstrapVersion", project.bootstrappedOn)
    inputs.dir("$buildDir/generated-bir").withPathSensitivity(PathSensitivity.RELATIVE)
    outputs.dir "$buildDir/generated-bir-jar"
    outputs.cacheIf { true }
}

task copySelfToBirCache(type: Copy) {
    dependsOn createCacheEntries
    from "$buildDir/generated-bir"
    into "$buildDir/bir-cache"
}

task createBirZipArtifact(type: Zip) {
    from "$buildDir/generated-bir"
    include '**/*'
    archiveName "$project.name-bir-artifact.zip"
    destinationDir(file("$buildDir/bir-artifact/"))
}

publishing {
    publications {
        mavenJava {
            if (file("$buildDir/generated-bir-jar/" + moduleName + ".jar").exists()) {
                artifact source: file("$buildDir/generated-bir-jar/" + moduleName + ".jar"), classifier: "bir-jar"
            }
            if (file("$buildDir/generated-bir/ballerina/" + moduleName + "/0.0.0/" + moduleName + ".bir").exists()) {
                artifact source: createBirZipArtifact, classifier: "bir", extension: 'zip'
            }
            if (file("$buildDir/generated-bir/ballerinax/" + moduleName + "/0.0.0/" + moduleName + ".bir").exists()) {
                artifact source: createBirZipArtifact, classifier: "bir", extension: 'zip'
            }
        }
    }
}

test {
    dependsOn copySelfToBirCache
    dependsOn createBirJar

    classpath += files("$buildDir/generated-bir-jar/" + moduleName + ".jar")
}

artifacts {
    bir file("$buildDir/generated-bir/"), { builtBy(createCacheEntries) }
    birJar file("$buildDir/generated-bir-jar/" + moduleName + ".jar"), { builtBy(createBirJar) }
}

def getJarCreationCommand(it, generatedBirDir, mapPath, jarsToBeLoaded) {
    def commands = []
    if (OperatingSystem.current().isWindows()) {
        commands = [ 'cmd', '/c', 'java', '-cp', '"' + new File(it, '/bre/lib/*"')];
    } else {
        def classPath = fileTree(new File(it, '/bre/lib/')).filter{ it.isFile() }.files.path.join(':')
        commands = [ 'java', '-cp', classPath];
    }
    if (project.name == 'string' || project.name == "error" || project.name == "value" || project.name == "map") {
        commands.add('-Dballerina.bstring=true')
    }
    commands.addAll(getCompilerBackendArgs(it, generatedBirDir, mapPath))
    commands.add("$buildDir/classpath/" + project.ext.moduleName + ".jar")
    return commands
}

/*
 This method generates a jar file which has only the MANIFEST file with a Class-Path entry to have all the jars
 that will be passed with java cmd as class path entries. This is added to avoid cmd too long issue that can come
 in windows build environment.
*/
static def createClassPathJar(outputName, Set jarsToBeLoaded) {
    Manifest manifest = new Manifest()
    manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, "1.0")
    String classPathEntry = ""
    Iterator iterator = jarsToBeLoaded.iterator()
    while (iterator.hasNext()) {
        File jarFile = new File(iterator.next().toString())
        if (OperatingSystem.current().isWindows()) {
            classPathEntry = classPathEntry.concat("/").concat(jarFile.getCanonicalPath().replace("\\", "/"))
        } else {
            classPathEntry = classPathEntry.concat(jarFile.getCanonicalPath())
        }
        if (iterator.hasNext()) {
            classPathEntry = classPathEntry.concat(" ")
        }
    }
    println "Class-Path : " + classPathEntry
    manifest.getMainAttributes().put(Attributes.Name.CLASS_PATH, classPathEntry)
    File classpathJarFile = new File(outputName)
    classpathJarFile.parentFile.mkdir()
    JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(classpathJarFile), manifest)
    jarOutputStream.finish()
}

def printJarCreationCommand(it, generatedBirDir, mapPath, jarsToBeLoaded) {
    def commands = []
    if (OperatingSystem.current().isWindows()) {
        commands = [ 'cmd', '/c', 'java', '-cp']
    } else {
        commands = [ 'java', '-cp']
    }

    commands.add('"' + new File(it, '/bre/lib/*"'))
    commands.addAll(getCompilerBackendArgs(it, generatedBirDir, mapPath))
    commands.add("$buildDir/classpath/" + project.ext.moduleName + ".jar")
    println commands
}

def getCompilerBackendArgs(it, generatedBirDir, mapPath) {
    return ['ballerina.compiler_backend_jvm.___init',
            generatedBirDir + project.ext.moduleName + '.bir',
            mapPath,
            "$buildDir/generated-bir-jar/" + project.ext.moduleName + ".jar",
            'false',
            'false',
            "1",
            "$buildDir/bir-cache"]
}
